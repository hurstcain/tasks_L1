package main

import (
	"fmt"
	"sync"
)

func main() {
	// Размер массива
	const arrSize = 5
	// Массив с числами, квадраты которых будут суммироваться
	arr := [arrSize]int{2, 4, 6, 8, 10}

	// Сумма чисел
	sum := 0
	// Мьютекс, который будет использоваться для блокировки доступа к переменной sum
	sumMu := sync.Mutex{}

	// Группа горутин, выполнения которых будет ожидать программа
	var wg sync.WaitGroup
	// В группе столько же горутин сколько элементов в массиве arr
	wg.Add(arrSize)

	// Запуск горутин в количестве arrSize штук, каждая из которых прибавляет к переменной sum квадрат
	// одного из элементов массива
	for i := 0; i < arrSize; i++ {
		go func(a int) {
			// Метод wg.Done() выполняется после завершения работы горутины и уменьшает счетчик
			// работающих горутин на единицу
			defer wg.Done()

			// Блокируем доступ к переменной sum для других горутин
			sumMu.Lock()
			sum += a * a
			// Деблокируем доступ
			sumMu.Unlock()
		}(arr[i])
	}

	// Ждем завершения работы всех горутин
	wg.Wait()

	// Выводим на экран значение переменной sum
	fmt.Println(sum)
}
