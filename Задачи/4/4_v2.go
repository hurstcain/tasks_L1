// В данной версии программы данные записываются в канал в горутине main
package main

import (
	"flag"
	"fmt"
	"math/rand"
	"os"
	"os/signal"
	"sync"
	"time"
)

func main() {
	// Канал, в который записываются данные
	ch := make(chan int, 10)

	// Флаг с количеством горутин, которые будут читать данные из канала ch и выводить их в консоль
	// Если при запуске программы флаг не указан, значение по умолчанию - 10
	nWorkers := flag.Int("workers", 10, "Number of workers goroutines")
	flag.Parse()

	// Группа горутин, выполнения которых будет ожидать программа
	// Программа будет ожидать выполнения всех горутин, читающих данные из канала
	wg := sync.WaitGroup{}
	wg.Add(*nWorkers)

	// Канал, который будет принимать сигнал завершения работы программы (Ctrl+C)
	chExit := make(chan os.Signal, 1)
	signal.Notify(chExit, os.Interrupt)

	// Запускает горутины в количестве nWorkers штук, которые читают данные из канала ch и выводят их на экран
	for i := 0; i < *nWorkers; i++ {
		go func(num int) {
			defer wg.Done()
			for {
				// Здесь происходит проверка на то, закрыт ли канал. Если канал открыт, то переменная ok равна true,
				// тогда данные из канала считываются. А если ok равна false, то это значит, что канал закрыт, тогда
				// горутина завершает свою работу
				if val, ok := <-ch; ok {
					fmt.Printf("Worker №%d: %d\n", num, val)
					continue
				}
				return
			}
		}(i + 1)
	}

	// Цикл, в котором записываются данные в канал ch
LOOP:
	for {
		select {
		// Если пришел сигнал завершения программы, то канал ch закрывается, затем ждем 10 милисекунд для того,
		// чтобы остальные горутины успели вывести данные и завершиться (нужно просто для красивого вывода),
		// потом выводим сообщение о закрытии канала и выходим из бесконечного цикла
		case <-chExit:
			close(ch)
			time.Sleep(10 * time.Millisecond)
			fmt.Println("Ctrl+C pressed in terminal. Closing channel...")
			break LOOP
		// Иначе записываем рандомное число в канал
		default:
			ch <- rand.Intn(1000)
		}
	}

	// Ожидание завершения работы группы горутин
	wg.Wait()

	fmt.Println("Program is finished")
}
