package main

/*
Программа демонстрирует остановку выполнения горутины с помощью канала time.After()
*/

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	ch := make(chan int)

	// Группа горутин, завершения которых будет ожидать программа
	wg := sync.WaitGroup{}
	wg.Add(1)

	// Горутина, которая считывает данные из канала, а после истечения трех секунд завершает свою работу
	go func() {
		defer wg.Done()
		for {
			select {
			// По завершении трех секунд в канал приходит значение текущего времени, данные из канала читаются,
			// и горутина завершает работу
			case <-time.After(3 * time.Second):
				fmt.Println("Прошло 3 секунды. Завершение работы горутины...")
				return
			case val := <-ch:
				fmt.Printf("Данные из канала ch: %d\n", val)
			}
		}
	}()

	// Записываем данные в канал
	ch <- 10

	// Ожидание завершения работы горутины
	wg.Wait()

	fmt.Println("Программа завершила работу")
}
